# Stage 1: Build the application
FROM debian:bookworm-slim as builder

WORKDIR /usr/src/myapp

# Install necessary build tools and libraries
RUN apt-get update && \
    apt-get install -y make clang libc-dev curl cmake python3 protobuf-compiler pkg-config libssl-dev git wget build-essential && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Setup Rust environment
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Copy your source files and .env
COPY Cargo.toml Cargo.lock ./
COPY repo ./repo
COPY model ./model
COPY index-config.yaml ./index-config.yaml
COPY src ./src
COPY .env ./

# Build the application
RUN cargo build --release
RUN ls /usr/src/myapp/target/release/

# Stage 2: Setup the runtime environment
FROM debian:bookworm-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y ca-certificates libssl-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy the Rust binary and necessary libraries from the builder stage
COPY --from=builder /usr/src/myapp/target/release/ingestion /app/
COPY --from=builder /usr/src/myapp/target/release/libonnxruntime.so.* /app/
COPY --from=builder /usr/src/myapp/index-config.yaml /app/
COPY --from=builder /usr/src/myapp/.env /app/

# Make the Rust binary executable
RUN chmod +x /app/ingestion

# Set environment variables
ENV LD_LIBRARY_PATH="/app:${LD_LIBRARY_PATH}"

# Command to run the application
CMD ["./ingestion"]
