Query: How are github app private keys handled, Repo: bloop-ai
"How are github app private keys handled"
bearer token: "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"
first action Query("How are github app private keys handled")


inside step Query("How are github app private keys handled")

full history:
 [PlainText { role: "system", content: "Your job is to choose the best action. Call functions to find information that will help answer the user's query. Call functions.none when you have enough information to answer. Follow these rules at all times:\n\n- ALWAYS call a function, DO NOT answer the question directly, even if the query is not in English\n- DO NOT call a function that you've used before with the same arguments\n- DO NOT assume the structure of the codebase, or the existence of files or folders\n- Call functions.none with paths that you are confident will help answer the user's query\n- In most cases call functions.code or functions.path functions before calling functions.none\n- If the user is referring to, or asking for, information that is in your history, call functions.none\n- If after attempting to gather information you are still unsure how to answer the query, call functions.none\n- If the query is a greeting, or not a question or an instruction call functions.none\n- When calling functions.code or functions.path, your query should consist of keywords. E.g. if the user says 'What does contextmanager do?', your query should be 'contextmanager'. If the user says 'How is contextmanager used in app', your query should be 'contextmanager app'. If the user says 'What is in the src directory', your query should be 'src'\n- If functions.code or functions.path did not return any relevant information, call them again with a SIGNIFICANTLY different query. The terms in the new query should not overlap with terms in your old one\n- If the output of a function is empty, try calling the function again with DIFFERENT arguments OR try calling a different function\n- Only call functions.proc with path indices that are under the PATHS heading above.\n- Call functions.proc with paths that might contain relevant information. Either because of the path name, or to expand on code that's already been returned by functions.code. Rank these paths based on their relevancy, and pick only the top five paths, and reject others\n- DO NOT call functions.proc with more than 5 paths, it should 5 or less paths\n- DO NOT call functions.proc on the same file more than once\n- ALWAYS call a function. DO NOT answer the question directly" }, PlainText { role: "user", content: "How are github app private keys handled" }, PlainText { role: "user", content: "Call a function. Do not answer" }, PlainText { role: "user", content: "How are github app private keys handled" }, PlainText { role: "user", content: "Call a function. Do not answer" }]
trimmed history:
 [PlainText { role: "system", content: "Your job is to choose the best action. Call functions to find information that will help answer the user's query. Call functions.none when you have enough information to answer. Follow these rules at all times:\n\n- ALWAYS call a function, DO NOT answer the question directly, even if the query is not in English\n- DO NOT call a function that you've used before with the same arguments\n- DO NOT assume the structure of the codebase, or the existence of files or folders\n- Call functions.none with paths that you are confident will help answer the user's query\n- In most cases call functions.code or functions.path functions before calling functions.none\n- If the user is referring to, or asking for, information that is in your history, call functions.none\n- If after attempting to gather information you are still unsure how to answer the query, call functions.none\n- If the query is a greeting, or not a question or an instruction call functions.none\n- When calling functions.code or functions.path, your query should consist of keywords. E.g. if the user says 'What does contextmanager do?', your query should be 'contextmanager'. If the user says 'How is contextmanager used in app', your query should be 'contextmanager app'. If the user says 'What is in the src directory', your query should be 'src'\n- If functions.code or functions.path did not return any relevant information, call them again with a SIGNIFICANTLY different query. The terms in the new query should not overlap with terms in your old one\n- If the output of a function is empty, try calling the function again with DIFFERENT arguments OR try calling a different function\n- Only call functions.proc with path indices that are under the PATHS heading above.\n- Call functions.proc with paths that might contain relevant information. Either because of the path name, or to expand on code that's already been returned by functions.code. Rank these paths based on their relevancy, and pick only the top five paths, and reject others\n- DO NOT call functions.proc with more than 5 paths, it should 5 or less paths\n- DO NOT call functions.proc on the same file more than once\n- ALWAYS call a function. DO NOT answer the question directly" }, PlainText { role: "user", content: "How are github app private keys handled" }, PlainText { role: "user", content: "Call a function. Do not answer" }, PlainText { role: "user", content: "How are github app private keys handled" }, PlainText { role: "user", content: "Call a function. Do not answer" }]
llm call
Setting up bearer token
FunctionCall { name: Some("code"), arguments: "{\n  \"query\": \"github app private keys handling\"\n}" } next action
Action number: 2, Action: Code { query: "github app private keys handling" }

inside step Code { query: "github app private keys handling" }

semantic search

Dropping agent
